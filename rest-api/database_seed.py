import random
import psycopg2
from faker import Faker

from datetime import datetime
from datetime import timedelta


def create_vehicle(conn, name):
	# create a cursor
	cur = conn.cursor()

	sql = """INSERT INTO vehicles(name)
	             VALUEs (%s) returning id"""

	cur.execute(sql,(name,))	
	
	vehicle_id = cur.fetchone()[0]


	conn.commit()
	
	return vehicle_id



def get_vehicle(conn, name):
	cur = conn.cursor()
	sql = """select * from vehicles
             where name = (%s);"""

	cur.execute(sql, (name,))


	vehicle = cur.fetchone()
	cur.close()

	return vehicle

def get_vehicles(conn):
	cur = conn.cursor()
	sql = """select * from vehicles;"""

	cur.execute(sql)


	vehicles = cur.fetchall()
	cur.close()

	return vehicles


def create_application(conn, application_name, version):
	# create a cursor
	cur = conn.cursor()

	sql = """INSERT INTO applications(name, version)
	             VALUEs (%s, %s) returning id;"""

	cur.execute(sql,(application_name, str(version),))	
	
	applcation_id = cur.fetchone()[0]

	conn.commit()

	return applcation_id


def get_applications(conn):
	cur = conn.cursor()
	sql = """select * from applications;"""

	cur.execute(sql)


	applicaions = cur.fetchall()
	cur.close()

	return applications



def create_ignition_cycle(conn):
	pass


def create_active_screens(conn, vehicle_id, application_id, screen_name, time_stamp):
	# create a cursor
	cur = conn.cursor()

	sql = """INSERT INTO active_screens(app_name, screen_name, vehicle_id, timestamp)
	             VALUEs (%s, %s, %s, %s);"""

	cur.execute(sql,(application_id, screen_name, vehicle_id, time_stamp,))	
	

	conn.commit()



# Gets a list of all of the application screens for all of the applications that are currently being used
def get_application_screens(conn):
	pass


# get the timestamp of the last data entry that was generated by the program
def get_last_entry(conn):
	pass




def truncate_tables(conn):
	cur = conn.cursor()

	sql = """truncate vehicles cascade;"""

	cur.execute(sql)	


	sql = """truncate applications cascade;"""

	cur.execute(sql)	
	
	sql = """truncate active_screens cascade;"""

	cur.execute(sql)	

	conn.commit()




def generate_day(conn, start_time, vehicles, applications, application_screens, entry_count):
	vehicle_times = []
	for i in range(len(vehicles)):
		vehicle_times.append(start_time + timedelta(seconds=int(random.uniform(0,60) * 60)))



	for i in range(entry_count):
		application_index = int(random.random() * (application_count - 1))

		application = applications[application_index]
		application_screen = applications_screens[application_index][int(random.random() * application_screen_count)]
		vehicle_index = int(random.random() * vehicle_count)
		vehicle = vehicles[vehicle_index]


		create_active_screens(conn, vehicle, application, application_screen, vehicle_times[vehicle_index])


		time_delta = int(random.uniform(0,120) * 60)
		vehicle_times[vehicle_index] = vehicle_times[vehicle_index] + timedelta(seconds=time_delta)


def start_clean(conn, vehicle_count, application_count, application_screen_count, entry_count, start_time, end_time):


	fake = Faker()


	# clear all of the old data
	truncate_tables(conn)

	# Need to populate the list of vehicles and their ids

	vehicles = []
	vehicle_names = []
	for i in range(vehicle_count):
		temp_name = fake.name()
		while(temp_name in vehicle_names):
			temp_name = fake.prefix() + temp_name
		vehicle_names.append(temp_name)
		vehicle_id = create_vehicle(conn,temp_name)
		vehicles.append(vehicle_id)



	# Need to populate the list of applications and their ids
	applications = []

	applications_screens = {}

	for i in range(application_count):
		temp_name = fake.company_suffix()
		application_id = create_application(conn,temp_name, 1.0)
		applications.append(application_id)

		application_screens = []
		for j in range(application_screen_count):
			application_screens.append(fake.hostname())

		applications_screens[i] = application_screens


	generate_day(conn, vehicles, applcations, application_screens, entry_count)




def generate_new_day(conn, entry_count):

	# Get the last date that data was generated for
	start_time = 


	vehciles = get_vehicles(conn)
	applications = get_applications(conn)
	application_screens = get_application_screens(conn)


	generate_day(conn, vehicles, applcations, application_screens, entry_count)





# number of vehicles
vehicle_count = 1000


#number of applications
application_count = 10


#number of application_screens
application_screen_count = 1

#number of active screens to add to the table
entry_count = 15000

# time to start the simulation
start_time = datetime.strptime('Jun 1 2005  12:01AM', '%b %d %Y %I:%M%p')


end_time  = datetime.strptime('Jun 1 2005  11:59PM', '%b %d %Y %I:%M%p')







# Creates a days worth of data for a set of vehicles
conn = psycopg2.connect(host="localhost",database="aptiv_test_1", user="postgres", password="password")

cur = conn.cursor()

# execute a statement
print('PostgreSQL database version:')
cur.execute('SELECT version()')

# display the PostgreSQL database server version
db_version = cur.fetchone()
print(db_version)

# cur.execute("SELECT * FROM active_screens")
# print("The number of parts: ", cur.rowcount)
# row = cur.fetchone()
# print(row)



# Clears everything and starts with brand new data for a single day, or a set of days if you want it ot generate multiple days
# start_clean(conn, vehicle_count, application_count, application_screen_count, entry_count, start_time, end_time):


# Generates new data for all of the vehciles in the database for the next day
generate_new_day(conn):


